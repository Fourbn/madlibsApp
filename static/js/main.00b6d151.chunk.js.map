{"version":3,"sources":["firebase.js","Results.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Results","state","leaderboard","database","ref","on","snapshot","data","val","updateLeaderboard","madlib","push","setState","this","map","key","Component","App","handleChange","word","event","usersWords","target","value","errorCheck","e","preventDefault","trimmedWords","Object","values","i","trim","filter","length","alert","displayMadlib","wordsArray","completeMadlib","madlibTemplate","k","join","hideInputs","handleSave","dbRef","alreadySaved","handleRefresh","noun","adjective","adverb","number","sentence","period","restart","id","onSubmit","type","onChange","required","className","form","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.00b6d151.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n   apiKey: \"AIzaSyCbCf_NllK9ML_D04soZXCQ9U7EoE1ZQaY\",\r\n   authDomain: \"madlibs-app.firebaseapp.com\",\r\n   databaseURL: \"https://madlibs-app.firebaseio.com\",\r\n   projectId: \"madlibs-app\",\r\n   storageBucket: \"madlibs-app.appspot.com\",\r\n   messagingSenderId: \"1077558462525\",\r\n   appId: \"1:1077558462525:web:fa7882737ab0b920e5c254\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, { Component } from 'react';\r\nimport firebase from './firebase.js'\r\n\r\nclass Results extends Component {\r\n   constructor() {\r\n      super()\r\n      this.state = {\r\n         leaderboard: []\r\n      }\r\n   }\r\n\r\n   componentDidMount() {\r\n      const dbRef = firebase.database().ref();\r\n\r\n      dbRef.on('value', (snapshot) => {\r\n         const data = snapshot.val();\r\n\r\n         const updateLeaderboard = [];\r\n\r\n         for (let madlib in data) {\r\n            updateLeaderboard.push( data[madlib] )\r\n         }\r\n\r\n         this.setState({\r\n            leaderboard: updateLeaderboard\r\n         })\r\n      })\r\n   }\r\n\r\n   render() {\r\n      return(\r\n         <ul>\r\n            {\r\n               this.state.leaderboard.map( (madlib, key) => {\r\n                  return <li key={key}>{madlib}</li>\r\n               })\r\n            }\r\n         </ul>\r\n      )\r\n   }\r\n}\r\n\r\nexport default Results;","import React, { Component, Fragment } from 'react';\nimport firebase from './firebase.js'\nimport Results from './Results.js';\n// import Madlib from './Madlib.js';\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      usersWords: {\n        noun: '',\n        adjective: '',\n        adverb: '',\n        number: '',\n        sentence: '',\n        period: ''\n      },\n      displayMadlib: false,\n      hideInputs: false,\n      madlibTemplate: ['This is a noun: ', '. This is an adjective: ', '. This is an adverb: ', '. This is a number: ', '. And this is a sentence: ', '.'],\n      madlib: '',\n      alreadySaved: false,\n      restart: false,\n    };\n  }\n\n  handleChange = (word, event) => {\n    const { usersWords } = this.state \n    this.setState({\n      usersWords: {\n        ...usersWords,\n        [word]: event.target.value\n      }\n    });\n  }\n\n  errorCheck = (e) => {\n    e.preventDefault();\n    const copyOfWords = Object.values(this.state.usersWords)\n    const trimmedWords = copyOfWords.map((i) => {\n      return i.trim()\n    })\n    \n    const failedWords = trimmedWords.filter((i) => {\n      if (i === '') {\n        return 'fail'\n      }\n    })\n\n    if (failedWords.length > 1) {\n      alert('Error!')\n    } else {\n      this.displayMadlib(trimmedWords, e)\n    }\n  }\n\n  displayMadlib = (wordsArray) => {\n    const madlibsArray = [...this.state.madlibTemplate]\n\n    const generateMadlib = madlibsArray.map((i, k) => {\n      return (\n        i + wordsArray[k]\n      )\n    })\n\n    const completeMadlib = generateMadlib.join('')\n    this.setState({madlib: completeMadlib})\n\n    this.setState({displayMadlib: !this.state.displayMadlib})\n    this.setState({hideInputs: true})\n  }\n\n  handleSave = (madlib) => {\n    const dbRef = firebase.database().ref();\n\n    if (this.state.alreadySaved === !true) {\n      dbRef.push(madlib);\n    }\n\n    this.setState({alreadySaved: true})\n  }\n\n  handleRefresh = () => {\n    this.setState({\n      displayMadlib: false,\n      hideInputs: false,\n      alreadySaved: false,\n    })\n  }\n\n  render() {\n    const { noun, adjective, adverb, number, sentence} = this.state.usersWords\n    return (\n      <Fragment>\n        <header>\n          <h1>Madlibs!</h1>\n          <p>Write in the words you think match the prompts and then click submit.</p>\n        </header>\n        <main>\n          {this.state.hideInputs ? null : \n            <form id=\"madlibPrompts\" onSubmit={(e) => this.errorCheck(e)}>\n              <label>\n                Noun:\n                <input type=\"text\" value={noun} onChange={(e) => this.handleChange('noun', e)} required/>\n              </label>\n\n              <label>\n                Adjective:\n                <input type=\"text\" value={adjective} onChange={(e) => this.handleChange('adjective', e)} required/>  \n              </label>\n\n              <label>\n                Adverb:\n                <input type=\"text\" value={adverb} onChange={(e) => this.handleChange('adverb', e)} required/>\n              </label>\n              \n              <label>\n                Number:\n                <input type=\"text\" value={number} onChange={(e) => this.handleChange('number', e)} required/>\n              </label>\n              \n              <label>\n                Sentence:\n                <textarea value={sentence} onChange={(e) => this.handleChange('sentence', e)} required/>\n              </label>\n            </form>\n          }\n            \n          {this.state.displayMadlib ? \n            <section>\n              <h2>Here's your Madlib!</h2>\n              <p>{this.state.madlib}</p>\n            </section>\n          : null}\n\n          <section className=\"buttonNav\">\n            {this.state.displayMadlib ? null : \n              <button type=\"submit\" form=\"madlibPrompts\">Click to display the madlib!</button>}\n            \n            {this.state.hideInputs ? \n            <Fragment>\n              <button onClick={() => this.handleSave(this.state.madlib)}>\n                {this.state.alreadySaved ? 'Saved!' : 'Save Madlib!'}\n              </button> \n              <button onClick={this.handleRefresh} >Back to Start</button>\n            </Fragment>\n            : null}\n\n          </section>\n\n          {this.state.displayMadlib ? <Results /> : null}\n        </main>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}