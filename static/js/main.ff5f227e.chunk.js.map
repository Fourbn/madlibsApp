{"version":3,"sources":["firebase.js","MadlibForm.js","Results.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","MadlibForm","handleChange","index","event","wordsCopy","state","usersWords","target","name","value","setState","prompts","database","ref","on","snapshot","userInputs","val","props","propPathing","values","map","prompt","prevProps","this","id","className","onSubmit","propFormSubmit","key","type","htmlFor","onChange","required","Component","Results","_isMounted","handleLike","likeId","dataset","dbRef","likedMadlib","leaderboard","filter","madlib","document","getElementById","disabled","likes","child","update","data","updateLeaderboard","userMadlib","madlibObject","push","title","user","data-id","onClick","aria-label","icon","faThumbsUp","parse","App","handleUserName","userName","handleErrors","array","i","length","generateMadlib","finishedLib","madlibTemplate","k","spillOver","join","handleFormSubmit","preventDefault","wordArray","trim","madlibCreated","hideInputs","alert","handleSave","dbObject","alreadySaved","handleRefresh","switchMadlib","window","confirm","dbPath","slideMenu","slideIn","restart","story","prevState","placeholder","form","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ff5f227e.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n   apiKey: \"AIzaSyCbCf_NllK9ML_D04soZXCQ9U7EoE1ZQaY\",\r\n   authDomain: \"madlibs-app.firebaseapp.com\",\r\n   databaseURL: \"https://madlibs-app.firebaseio.com\",\r\n   projectId: \"madlibs-app\",\r\n   storageBucket: \"madlibs-app.appspot.com\",\r\n   messagingSenderId: \"1077558462525\",\r\n   appId: \"1:1077558462525:web:fa7882737ab0b920e5c254\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, { Component, Fragment } from 'react';\r\nimport firebase from './firebase.js';\r\n\r\nclass MadlibForm extends Component {\r\n   constructor() {\r\n      super()\r\n      this.state = {\r\n         prompts: [],\r\n         usersWords: []\r\n      }\r\n   }\r\n\r\n   componentDidMount() {\r\n      const dbRef = firebase.database().ref( 'madlibData' )\r\n      dbRef.on('value', snapshot => {\r\n         const userInputs = snapshot.val()[this.props.propPathing].userInputs\r\n         const values = userInputs.map(prompt => {\r\n            const valueObj = {\r\n               [prompt.value]: ''\r\n            }\r\n            return valueObj\r\n         })\r\n         this.setState({\r\n            prompts: userInputs,\r\n            usersWords: values\r\n         })\r\n      })\r\n   }\r\n\r\n   //Same as App.js, lifecycle method is called when the user switches madlib templates\r\n   componentDidUpdate( prevProps ) {\r\n      if ( prevProps.propPathing !== this.props.propPathing ) {\r\n         this.setState({\r\n            usersWords: []\r\n         })\r\n         const dbRef = firebase.database().ref( 'madlibData' )\r\n         dbRef.on('value', snapshot => {\r\n            const userInputs = snapshot.val()[this.props.propPathing].userInputs\r\n            const values = userInputs.map(prompt => {\r\n               const valueObj = {\r\n                  [prompt.value]: ''\r\n               }\r\n               return valueObj\r\n            })\r\n            this.setState({\r\n               prompts: userInputs,\r\n               usersWords: values\r\n            })\r\n         })\r\n      }\r\n   }\r\n\r\n   handleChange = ( index, event ) => {\r\n      const wordsCopy = [...this.state.usersWords]\r\n      wordsCopy[index][event.target.name] = event.target.value\r\n\r\n      this.setState({\r\n         usersWords: wordsCopy\r\n      })\r\n   }\r\n\r\n   render() {\r\n      return(\r\n         <form \r\n            id=\"madlibPrompts\" \r\n            className=\"madlibPrompts\" \r\n            onSubmit={( event ) => this.props.propFormSubmit( event, this.state.usersWords )} >\r\n               <div className=\"formContainer\">\r\n               {this.state.prompts.map(( prompt, index ) => {\r\n                  return (\r\n                     <Fragment key={index}>\r\n                        <label \r\n                           id={'input' + index} \r\n                           className={'input' + index} >{prompt.name}\r\n                        </label>\r\n                        <input \r\n                           type=\"text\" \r\n                           htmlFor={'input' + index} \r\n                           name={prompt.value} \r\n                           value={this.state.usersWords[index][prompt.value]} \r\n                           onChange={( event ) => this.handleChange( index, event )} \r\n                           required />\r\n                     </Fragment>\r\n                  )\r\n               })}\r\n               </div>\r\n         </form>\r\n      )\r\n   }\r\n}\r\n\r\nexport default MadlibForm;","import React, { Component } from 'react';\r\nimport firebase from './firebase.js'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faThumbsUp } from '@fortawesome/free-regular-svg-icons' \r\nimport parse from 'html-react-parser';\r\n\r\nclass Results extends Component {\r\n   //I got this fix from StackOverflow (https://stackoverflow.com/questions/53949393/cant-perform-a-react-state-update-on-an-unmounted-component) but I'm only partially sure as to how exactly it is working.\r\n   //I was getting this warning message: Warning: Can't perform a React state update on an unmounted component.\r\n   //This error was popping up when I had already submitted the user inputs, I was on the results page and I clicked to save my madlib to the database. I believe the issue is that I'm saving the leaderboard state inside this component and there's a problem with the lifecycle methods running that setState over and over again\r\n   //So the fix is to ask react to validate the _isMounted before running setState and then reset that again. I'm not entirely sure on the syntax or the specifics as to why, but I didn't want to take up helpcue time with a problem that is technically already solved.\r\n   _isMounted = false;\r\n\r\n   constructor() {\r\n      super()\r\n      this.state = {\r\n         leaderboard: [],\r\n      }\r\n   }\r\n\r\n   componentDidMount() {\r\n      this._isMounted = true;\r\n\r\n      const dbRef = firebase.database().ref( 'leaderboard' );\r\n      dbRef.on('value', ( snapshot ) => {\r\n         const data = snapshot.val();\r\n         const updateLeaderboard = [];\r\n\r\n         for ( let userMadlib in data ) {\r\n            const madlibObject = {\r\n               id: userMadlib,\r\n               madlib: data[userMadlib]\r\n            }\r\n            updateLeaderboard.push( madlibObject )\r\n         }\r\n\r\n         this.setState({\r\n            leaderboard: updateLeaderboard\r\n         })\r\n      })\r\n   }\r\n\r\n   handleLike = ( event ) => {\r\n      const likeId = event.target.dataset.id\r\n      const dbRef = firebase.database().ref( 'leaderboard' )\r\n      const likedMadlib = [...this.state.leaderboard].filter(( madlib ) => {\r\n         return madlib.id === likeId\r\n      })\r\n\r\n      //Catches if the like button returns an undefined value and ensure that React doesn't break. The button just doesn't respond and the user can click again. \r\n      //This if statement idea is from Colin who went through my code to find a way to catch it breaking.\r\n      if (likedMadlib && likedMadlib[0]) {\r\n         //Checks to see if the user has already clicked the button and submitted a like. If so, it will disable the button before they can submit another one.\r\n         let click = 0\r\n         click++\r\n         if ( click > 0 ) {\r\n            const thisButton = document.getElementById(likeId)\r\n            thisButton.disabled = true\r\n         }\r\n\r\n         likedMadlib[0].madlib.likes++\r\n         dbRef.child( likeId ).update( likedMadlib[0].madlib );\r\n      } \r\n\r\n   }\r\n\r\n   componentWillUnmount() {\r\n      this._isMounted = false;\r\n   }\r\n\r\n   render() {\r\n      return(\r\n         <section className=\"leaderboard\">\r\n            <h2>Leaderboard</h2>\r\n            <ul className=\"leaderboardGrid\" >\r\n               {\r\n                  this.state.leaderboard.map( ( madlibObject ) => {\r\n                     return (\r\n                     <li key={ madlibObject.id } >\r\n                        <div className=\"header\">\r\n                           <h3>{ madlibObject.madlib.title } by { madlibObject.madlib.user }</h3>\r\n                           <button \r\n                              id={ madlibObject.id } \r\n                              data-id={ madlibObject.id } \r\n                              onClick={ this.handleLike } \r\n                              aria-label=\"Click this button to like this Madlib\" >\r\n                                 <FontAwesomeIcon data-id={madlibObject.id} icon={faThumbsUp} /> {madlibObject.madlib.likes}\r\n                           </button>\r\n                        </div>\r\n                        <p>{ parse( madlibObject.madlib.madlib ) }</p>\r\n                     </li>\r\n                     )\r\n                  })\r\n               }\r\n            </ul>\r\n         </section>\r\n      )\r\n   }\r\n}\r\n\r\nexport default Results;","import React, { Component, Fragment } from 'react';\r\nimport firebase from './firebase.js';\r\nimport parse from 'html-react-parser';\r\nimport MadlibForm from './MadlibForm.js';\r\nimport Results from './Results.js';\r\nimport './styles/styles.scss'\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      // Database information\r\n      dbPath: 'dentist',\r\n      title: '',\r\n      madlibTemplate: [],\r\n      spillOver: '',\r\n      madlib: '',\r\n      userName: '',\r\n      // Ternary toggles\r\n      madlibCreated: false,\r\n      hideInputs: false,\r\n      alreadySaved: false,\r\n      restart: false,\r\n      slideIn: false\r\n    };\r\n  }\r\n\r\n  // Initial database call once render has completed\r\n  componentDidMount() {\r\n    const dbRef = firebase.database().ref( 'madlibData/' + this.state.dbPath )\r\n\r\n    dbRef.on('value', ( snapshot ) => {\r\n      this.setState({\r\n        title: snapshot.val().title,\r\n        madlibTemplate: snapshot.val().story,\r\n        spillOver: snapshot.val().spillOver\r\n      })\r\n    })\r\n  }\r\n\r\n  //If the user switches madlibs, React calls this lifecycle method and updates state\r\n  componentDidUpdate( prevProps, prevState ) {\r\n    if ( prevState.dbPath !== this.state.dbPath ) {\r\n      const dbRef = firebase.database().ref( 'madlibData/' + this.state.dbPath )\r\n  \r\n      dbRef.on('value', ( snapshot ) => {\r\n        this.setState({\r\n          title: snapshot.val().title,\r\n          madlibTemplate: snapshot.val().story,\r\n          spillOver: snapshot.val().spillOver\r\n        })\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  handleUserName = ( event ) => {\r\n    this.setState({\r\n      userName: event.target.value\r\n    })\r\n  }\r\n\r\n  handleErrors = ( array ) => {\r\n    const failedWords = array.filter(( i ) => {\r\n      return i === ''\r\n    })\r\n    return failedWords.length === 0\r\n  }\r\n\r\n  generateMadlib = ( array ) => {\r\n    const finishedLib = [...this.state.madlibTemplate].map(( i, k ) => {\r\n      return i + '<span>' + array[k] + '</span>'\r\n    })\r\n\r\n    if ( this.state.spillOver !== 0 ) {\r\n      finishedLib.push( this.state.spillOver )\r\n    }\r\n\r\n    this.setState({\r\n      madlib: finishedLib.join('')\r\n    })\r\n  }\r\n\r\n  \r\n  // BUTTON EVENT HANDLERS\r\n  // =========================================\r\n  handleFormSubmit = ( event, userInputs ) => {\r\n    event.preventDefault();\r\n    const wordArray = userInputs.map(( prompt ) => {\r\n      for ( const value in prompt ) {\r\n        return prompt[value].trim()\r\n      }\r\n      return true\r\n    })\r\n\r\n    if ( this.state.userName === '' ) {\r\n      this.setState({\r\n        userName: 'Anonymous'\r\n      })\r\n    }\r\n\r\n    if ( this.handleErrors( wordArray ) ) {\r\n      this.generateMadlib( wordArray )\r\n      this.setState({\r\n        madlibCreated: !this.state.madlibCreated,\r\n        hideInputs: true\r\n      })\r\n    } else {\r\n      alert('Oops! It looks like you missed a word. Make sure each prompt has a word buddy.')\r\n    }\r\n  }\r\n\r\n\r\n  handleSave = ( madlib, event ) => {\r\n    const dbRef = firebase.database().ref( 'leaderboard' );\r\n    const dbObject = {\r\n      madlib: madlib,\r\n      title: this.state.title,\r\n      user: this.state.userName,\r\n      likes: 0\r\n    }\r\n    if ( this.state.alreadySaved === !true ) {\r\n      dbRef.push( dbObject );\r\n    }\r\n    this.setState( {alreadySaved: true} )\r\n    event.target.disabled = true\r\n  }\r\n\r\n\r\n  handleRefresh = () => {\r\n    this.setState({\r\n      madlibCreated: false,\r\n      hideInputs: false,\r\n      alreadySaved: false,\r\n    })\r\n  }\r\n\r\n\r\n  switchMadlib = ( event ) => {\r\n    const confirmed = window.confirm('If you switch Madlibs, you\\'ll lose all your words! Are you sure?')\r\n    if ( confirmed ) {\r\n      this.setState({\r\n        dbPath: event.target.value,\r\n      })\r\n    }\r\n  }\r\n\r\n  slideMenu = () => {\r\n    this.setState({\r\n      slideIn: !this.state.slideIn\r\n    })\r\n  }\r\n// ===============================================\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <header className=\"wrapper\" >\r\n          <h1>{ this.state.title }</h1>\r\n          <div className=\"userName\">\r\n            <label \r\n              htmlFor=\"userName\" \r\n              aria-label=\"Enter your pen name here\" >\r\n                by\r\n            </label>\r\n            <input \r\n              onChange={ this.handleUserName } \r\n              type=\"text\" id=\"userName\" \r\n              placeholder=\"YOUR NAME HERE\" \r\n              value={ this.state.userName } \r\n              required />\r\n          </div>\r\n          <p>\r\n            {\r\n              this.state.madlibCreated \r\n              ? 'Great job! If you like what you\\'ve done, Save it to our leaderboard. Or you can Go Back and try again.' \r\n              : 'The best part about Madlibs is that it\\'s always a surprise! Write in the silly words below and Get Started!'\r\n            }\r\n          </p>\r\n          <div onClick={ this.slideMenu } \r\n            className={\"madlibChoices\" + \r\n            (this.state.hideInputs ? ' hidden' : '') + \r\n            (this.state.slideIn ? ' slideIn' : '')}>\r\n              <button \r\n                onClick={( event ) => this.switchMadlib( event )} \r\n                value=\"dentist\" \r\n                aria-label=\"Click here to choose the Dentist Madlib\" >\r\n                  A Visit to the Dentist\r\n              </button>\r\n              <button \r\n                onClick={( event ) => this.switchMadlib( event )} \r\n                value=\"pirate\" \r\n                aria-label=\"Click here to choose the Pirate Madlib\" >\r\n                  Talk like a Pirate!\r\n              </button>\r\n          </div>\r\n        </header>\r\n        <main className=\"wrapper\" >\r\n\r\n          {this.state.hideInputs ? null : \r\n            <MadlibForm \r\n              propFormSubmit={ this.handleFormSubmit } \r\n              propPathing={ this.state.dbPath } />\r\n          }\r\n            \r\n          {this.state.madlibCreated ? \r\n            <section className=\"madlibResult\" >\r\n              <h2>Here's your Madlib!</h2>\r\n              <p>{ parse( this.state.madlib ) }</p>\r\n            </section>\r\n          : null}\r\n\r\n          <section className=\"buttonNav\">\r\n            {this.state.madlibCreated ? null : \r\n              <button type=\"submit\" \r\n              form=\"madlibPrompts\" \r\n              aria-label=\"This button will create your Madlib\" >\r\n                Get Started!\r\n              </button>}\r\n            \r\n            {this.state.hideInputs ?\r\n            <Fragment>\r\n              <button \r\n                className=\"saveButton\" \r\n                onClick={ ( event ) => this.handleSave( this.state.madlib, event ) }>\r\n                  { this.state.alreadySaved ? 'Saved!' : 'Save Madlib!' }\r\n              </button> \r\n              <button \r\n                onClick={ this.handleRefresh } \r\n                title=\"This will reset your words\" \r\n                aria-label=\"This will also reset your words\" >\r\n                  Back to Start\r\n              </button>\r\n            </Fragment>\r\n            : null}\r\n          </section>\r\n\r\n          {this.state.madlibCreated ? <Results /> : null}\r\n        </main>\r\n        <footer className=\"wrapper\" >\r\n          <p>Created by Philip Turkiewicz 2020</p>\r\n        </footer>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}